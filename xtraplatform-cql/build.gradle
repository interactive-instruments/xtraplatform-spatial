plugins {
    id 'antlr'
}

maturity = 'MATURE'
maintenance = 'FULL'
description = 'CQL2 Expressions.'
descriptionDe = 'CQL2 Ausdr√ºcke.'

dependencies {
    provided project(":xtraplatform-crs")

    antlr libs.antlr

    embeddedFlat libs.antlr.runtime

    testProvided 'de.interactive_instruments:xtraplatform-blobs'
    testProvided 'de.interactive_instruments:xtraplatform-openapi'
    testProvided 'de.interactive_instruments:xtraplatform-nativ-loader'
    testProvided 'de.interactive_instruments:xtraplatform-proj'

    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
}

//prevent antlr from leaking into the module path
configurations.api {
    exclude(group: 'org.antlr', module: 'antlr4')
    exclude(group: 'org.antlr', module: 'antlr4-runtime')
    exclude(group: 'org.antlr', module: 'antlr-runtime')
    exclude(group: 'org.antlr', module: 'ST4')
    exclude(group: 'org.abego.treelayout', module: 'org.abego.treelayout.core')
    exclude(group: 'org.glassfish', module: 'javax.json')
    exclude(group: 'com.ibm.icu', module: 'icu4j')
}

ext {
    antlrOutDir = new File(buildDir, "/generated/src/main/antlr")
    javaOutRootDir = new File(buildDir, "/generated/src/main/java")
    javaOutDir = new File(javaOutRootDir, "de/ii/xtraplatform/cql/infra")
}

compileJava {
    project.sourceSets.main.java { srcDir javaOutRootDir }
    outputs.dir(javaOutRootDir)
}

generateGrammarSource {
    outputDirectory = antlrOutDir
    outputs.dir(javaOutDir)
    arguments += [
            '-visitor',
            '-no-listener',
            '-package', 'de.ii.xtraplatform.cql.infra',
            '-Xexact-output-dir'
    ]
    doLast {

        javaOutDir.mkdirs()
        copy {
            from antlrOutDir
            into javaOutDir
        }
        println javaOutDir
        println outputs.files.files
    }
}

//prevent antlr from leaking into the module path
publishing {
    publications.named('default').configure {
        pom.withXml {
            asNode().dependencies.'*'.findAll() {
                it.artifactId.text().startsWith('antlr') || it.artifactId.text().startsWith('ST4') || it.artifactId.text().startsWith('org.abego.treelayout') || it.artifactId.text().startsWith('javax.json') || it.artifactId.text().startsWith('icu4j')
            }.each {
                it.parent().remove(it)
            }
        }
    }
}

project.afterEvaluate {
    project.test.jacoco.excludes += ['CqlLexer*', 'CqlParser*']
}

