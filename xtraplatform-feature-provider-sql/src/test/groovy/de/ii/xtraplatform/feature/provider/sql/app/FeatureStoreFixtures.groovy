/*
 * Copyright 2021 interactive instruments GmbH
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package de.ii.xtraplatform.feature.provider.sql.app

import com.google.common.collect.ImmutableList
import de.ii.xtraplatform.features.domain.*

class FeatureStoreFixtures {

    static FeatureStoreInstanceContainer SCALAR_OPERATIONS = ImmutableFeatureStoreInstanceContainer.builder()
            .name("container")
            .sortKey("id")
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("floors")
                    .path(ImmutableList.of("container", "floors"))
                    .build())
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("taxes")
                    .path(ImmutableList.of("container", "taxes"))
                    .build())
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("owner")
                    .path(ImmutableList.of("container", "owner"))
                    .build())
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("swimming_pool")
                    .path(ImmutableList.of("container", "swimming_pool"))
                    .build())
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("material")
                    .path(ImmutableList.of("container", "material"))
                    .build())
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("built")
                    .path(ImmutableList.of("container", "built"))
                    .build())
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("updated")
                    .path(ImmutableList.of("container", "updated"))
                    .build())
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("location")
                    .path(ImmutableList.of("container", "location"))
                    .build())
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("geometry")
                    .path(ImmutableList.of("container", "geometry"))
                    .build())
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("names")
                    .path(ImmutableList.of("container", "names"))
                    .build())
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("name")
                    .path(ImmutableList.of("container", "name"))
                    .build())
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("event_date")
                    .path(ImmutableList.of("container", "event_date"))
                    .build())
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("height")
                    .path(ImmutableList.of("container", "height"))
                    .build())
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("filterValues.measure")
                    .path(ImmutableList.of("container", "filterValues.measure"))
                    .build())
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("filterValues1.filterValues2.measure")
                    .path(ImmutableList.of("container", "filterValues1.filterValues2.measure"))
                    .build())
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("landsat:scene_id")
                    .path(ImmutableList.of("container", "landsat:scene_id"))
                    .build())
            .build()

    static FeatureStoreInstanceContainer SIMPLE_GEOMETRY = ImmutableFeatureStoreInstanceContainer.builder()
            .name("building")
            .sortKey("id")
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("location")
                    .path(ImmutableList.of("building", "location"))
                    .build())
            .build()

    static FeatureStoreInstanceContainer JOINED_GEOMETRY = ImmutableFeatureStoreInstanceContainer.builder()
            .name("building")
            .sortKey("id")
            .addRelatedContainers(ImmutableFeatureStoreRelatedContainer.builder()
                    .name("geometry")
                    .sortKey("id")
                    .addInstanceConnection(ImmutableFeatureStoreRelation.builder()
                            .cardinality(FeatureStoreRelation.CARDINALITY.ONE_2_ONE)
                            .sourceContainer("building")
                            .sourceField("id")
                            .targetContainer("geometry")
                            .targetField("id")
                            .build())
                    .addAttributes(ImmutableFeatureStoreAttribute.builder()
                            .name("location")
                            .path(ImmutableList.of("geometry", "location"))
                            .build())
                    .build())
            .build();

    static FeatureStoreInstanceContainer SIMPLE_INSTANT = ImmutableFeatureStoreInstanceContainer.builder()
            .name("building")
            .sortKey("id")
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("built")
                    .path(ImmutableList.of("building", "built"))
                    .build())
            .build()

    static FeatureStoreInstanceContainer SIMPLE_INTERVAL = ImmutableFeatureStoreInstanceContainer.builder()
            .name("building")
            .sortKey("id")
            .addAttributes(ImmutableFeatureStoreAttribute.builder()
                    .name("updated")
                    .path(ImmutableList.of("building", "updated"))
                    .build())
            .build()

}
