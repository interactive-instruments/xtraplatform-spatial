/*
 * Copyright 2022 interactive instruments GmbH
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package de.ii.xtraplatform.features.sql.app

import com.google.common.collect.ImmutableMap
import de.ii.xtraplatform.cql.domain.Eq
import de.ii.xtraplatform.cql.domain.Gt
import de.ii.xtraplatform.cql.domain.ScalarLiteral
import de.ii.xtraplatform.features.domain.SchemaBase
import de.ii.xtraplatform.features.domain.SchemaBase.Type
import de.ii.xtraplatform.features.sql.domain.ImmutableSchemaSql
import de.ii.xtraplatform.features.sql.domain.ImmutableSqlRelation
import de.ii.xtraplatform.features.sql.domain.SchemaSql
import de.ii.xtraplatform.features.sql.domain.SqlRelation

class QuerySchemaFixtures {

    static List<SchemaSql> SIMPLE = [
            new ImmutableSchemaSql.Builder()
                    .name("externalprovider")
                    .sourcePath("externalprovider")
                    .type(Type.OBJECT)
                    .sortKey("id")
                    .primaryKey("id")
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("id")
                            .type(Type.STRING)
                            .sourcePath("id")
                            .parentPath(["externalprovider"])
                            .role(SchemaBase.Role.ID)
                            .build())
                    .build()
    ]

    static List<SchemaSql> SIMPLE_FILTER = [
            new ImmutableSchemaSql.Builder()
                    .name("externalprovider")
                    .sourcePath("externalprovider")
                    .type(Type.OBJECT)
                    .sortKey("id")
                    .primaryKey("id")
                    .filter(Eq.of("type", ScalarLiteral.of(1)))
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("type")
                            .type(Type.INTEGER)
                            .sourcePath("type")
                            .parentPath(["externalprovider"])
                            .build())
                    .build()
    ]

    static List<SchemaSql> VALUE_ARRAY = [
            new ImmutableSchemaSql.Builder()
                    .name("externalprovider")
                    .sourcePath("externalprovider")
                    .type(Type.OBJECT)
                    .sortKey("id")
                    .primaryKey("id")
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("id")
                            .type(Type.STRING)
                            .sourcePath("id")
                            .parentPath(["externalprovider"])
                            .role(SchemaBase.Role.ID)
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("externalprovider_externalprovidername")
                            .type(Type.OBJECT_ARRAY)
                            .parentPath(["externalprovider"])
                            .parentSortKeys(["externalprovider.id"])
                            .sortKey("id")
                            .primaryKey("id")
                            .addRelation(new ImmutableSqlRelation.Builder()
                                    .cardinality(SqlRelation.CARDINALITY.ONE_2_N)
                                    .sourceContainer("externalprovider")
                                    .sourceField("id")
                                    .sourceSortKey("id")
                                    .sourcePrimaryKey("id")
                                    .targetContainer("externalprovider_externalprovidername")
                                    .targetField("externalprovider_fk")
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("externalprovidername")
                                    .type(Type.STRING)
                                    .sourcePath("externalprovidername")
                                    .parentPath(["externalprovider", "[id=externalprovider_fk]externalprovider_externalprovidername"])
                                    .sortKey("id")
                                    .build())
                            .build())
                    .build()
    ]


    static List<SchemaSql> OBJECT_ARRAY = [
            new ImmutableSchemaSql.Builder()
                    .name("explorationsite")
                    .sourcePath("explorationsite")
                    .type(Type.OBJECT)
                    .sortKey("id")
                    .primaryKey("id")
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("id")
                            .type(Type.STRING)
                            .sourcePath("id")
                            .parentPath(["explorationsite"])
                            .role(SchemaBase.Role.ID)
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("task")
                            .sourcePath("task")
                            .type(Type.OBJECT_ARRAY)
                            .parentPath(["explorationsite"])
                            .parentSortKeys(["explorationsite.id"])
                            .sortKey("id")
                            .primaryKey("id")
                            .addRelation(new ImmutableSqlRelation.Builder()
                                    .cardinality(SqlRelation.CARDINALITY.ONE_2_N)
                                    .sourceContainer("explorationsite")
                                    .sourceField("id")
                                    .sourceSortKey("id")
                                    .sourcePrimaryKey("id")
                                    .targetContainer("explorationsite_task")
                                    .targetField("explorationsite_fk")
                                    .build())
                            .addRelation(new ImmutableSqlRelation.Builder()
                                    .cardinality(SqlRelation.CARDINALITY.ONE_2_ONE)
                                    .sourceContainer("explorationsite_task")
                                    .sourceField("task_fk")
                                    .targetContainer("task")
                                    .targetField("id")
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("id")
                                    .type(Type.STRING)
                                    .sourcePath("task.id")
                                    .parentPath(["explorationsite", "[id=explorationsite_fk]explorationsite_task", "[task_fk=id]task"])
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("projectname")
                                    .type(Type.STRING)
                                    .sourcePath("task.title")
                                    .parentPath(["explorationsite", "[id=explorationsite_fk]explorationsite_task", "[task_fk=id]task"])
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("id")
                                    .type(Type.STRING)
                                    .sourcePath("task.href")
                                    .parentPath(["explorationsite", "[id=explorationsite_fk]explorationsite_task", "[task_fk=id]task"])
                                    .build())
                            .build())
                    .build()
    ]

    static List<SchemaSql> MERGE = [
            new ImmutableSchemaSql.Builder()
                    .name("eignungsflaeche")
                    .sourcePath("eignungsflaeche")
                    .type(Type.OBJECT)
                    .sortKey("id")
                    .primaryKey("id")
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("programm")
                            .type(Type.STRING)
                            .sourcePath("programm")
                            .parentPath(["eignungsflaeche"])
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("osirisobjekt")
                            .type(Type.OBJECT)
                            .parentPath(["eignungsflaeche"])
                            .parentSortKeys(["eignungsflaeche.id"])
                            .sortKey("id")
                            .primaryKey("id")
                            .addRelation(new ImmutableSqlRelation.Builder()
                                    .cardinality(SqlRelation.CARDINALITY.ONE_2_ONE)
                                    .sourceContainer("eignungsflaeche")
                                    .sourceField("id")
                                    .sourceSortKey("id")
                                    .sourcePrimaryKey("id")
                                    .targetContainer("osirisobjekt")
                                    .targetField("id")
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("id")
                                    .type(Type.STRING)
                                    .sourcePath("id")
                                    .parentPath(["eignungsflaeche", "[id=id]osirisobjekt"])
                                    .role(SchemaBase.Role.ID)
                                    .sortKey("id")
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("kennung")
                                    .type(Type.STRING)
                                    .sourcePath("kennung")
                                    .parentPath(["eignungsflaeche", "[id=id]osirisobjekt"])
                                    .sortKey("id")
                                    .build())
                            .build())
                    .build()
    ]


    static SchemaSql SIMPLE_GEOMETRY = new ImmutableSchemaSql.Builder()
            .name("building")
            .type(Type.OBJECT)
            .sortKey("id")
            .addProperties(new ImmutableSchemaSql.Builder()
                    .name("location")
                    .sourcePath("location")
                    .type(Type.GEOMETRY)
                    .parentPath(["building"])
                    .build())
            .build()

    static SchemaSql JOINED_GEOMETRY = new ImmutableSchemaSql.Builder()
            .name("building")
            .type(Type.OBJECT)
            .sortKey("id")
            .addProperties(new ImmutableSchemaSql.Builder()
                    .name("geometry")
                    .type(Type.OBJECT)
                    .parentPath(["building"])
                    .addRelation(new ImmutableSqlRelation.Builder()
                            .cardinality(SqlRelation.CARDINALITY.ONE_2_ONE)
                            .sourceContainer("building")
                            .sourceField("id")
                            .targetContainer("geometry")
                            .targetField("id")
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("location")
                            .sourcePath("location")
                            .type(Type.GEOMETRY)
                            .parentPath(["building", "geometry"])
                            .build())
                    .build())
            .build();

    static SchemaSql SIMPLE_TIMESTAMP = new ImmutableSchemaSql.Builder()
            .name("building")
            .type(Type.OBJECT)
            .sortKey("id")
            .addProperties(new ImmutableSchemaSql.Builder()
                    .name("built")
                    .sourcePath("built")
                    .type(Type.DATETIME)
                    .parentPath(["building"])
                    .build())
            .build()

    static SchemaSql SIMPLE_DATE = new ImmutableSchemaSql.Builder()
            .name("building")
            .type(Type.OBJECT)
            .sortKey("id")
            .addProperties(new ImmutableSchemaSql.Builder()
                    .name("built")
                    .sourcePath("built")
                    .type(Type.DATE)
                    .parentPath(["building"])
                    .build())
            .build()

    static SchemaSql SIMPLE_INTERVAL = new ImmutableSchemaSql.Builder()
            .name("building")
            .type(Type.OBJECT)
            .sortKey("id")
            .addProperties(new ImmutableSchemaSql.Builder()
                    .name("updated")
                    .sourcePath("updated")
                    .type(Type.DATETIME)
                    .parentPath(["building"])
                    .build())
            .build()

    static List<SchemaSql> SELF_JOINS = [new ImmutableSchemaSql.Builder()
                                                 .name("building")
                                                 .type(Type.OBJECT)
                                                 .sourcePath("building")
                                                 .sortKey("id")
                                                 .primaryKey("id")
                                                 .addProperties(new ImmutableSchemaSql.Builder()
                                                         .name("id")
                                                         .sourcePath("id")
                                                         .type(Type.STRING)
                                                         .role(SchemaBase.Role.ID)
                                                         .parentPath(["building"])
                                                         .build())
                                                 .addProperties(new ImmutableSchemaSql.Builder()
                                                         .name("building")
                                                         .type(Type.OBJECT_ARRAY)
                                                         .sourcePath("consistsOfBuildingPart")
                                                         .sortKey("id")
                                                         .primaryKey("id")
                                                         .parentPath(["building"])
                                                         .parentSortKeys(["building.id"])
                                                         .addRelation(new ImmutableSqlRelation.Builder()
                                                                 .cardinality(SqlRelation.CARDINALITY.ONE_2_N)
                                                                 .sourceContainer("building")
                                                                 .sourceField("id")
                                                                 .sourceSortKey("id")
                                                                 .sourcePrimaryKey("id")
                                                                 .targetContainer("building")
                                                                 .targetField("fk_buildingpart_parent")
                                                                 .build())
                                                         .addProperties(new ImmutableSchemaSql.Builder()
                                                                 .name("id")
                                                                 .sourcePath("consistsOfBuildingPart.href")
                                                                 .type(Type.STRING)
                                                                 .parentPath(["building", "[id=fk_buildingpart_parent]building"])
                                                                 .build())
                                                         .build())
                                                 .addProperties(new ImmutableSchemaSql.Builder()
                                                         .name("building")
                                                         .type(Type.OBJECT)
                                                         .sourcePath("parent")
                                                         .sortKey("id")
                                                         .primaryKey("id")
                                                         .parentPath(["building"])
                                                         .parentSortKeys(["building.id"])
                                                         .addRelation(new ImmutableSqlRelation.Builder()
                                                                 .cardinality(SqlRelation.CARDINALITY.ONE_2_ONE)
                                                                 .sourceContainer("building")
                                                                 .sourceField("fk_buildingpart_parent")
                                                                 .sourceSortKey("id")
                                                                 .sourcePrimaryKey("id")
                                                                 .targetContainer("building")
                                                                 .targetField("id")
                                                                 .build())
                                                         .addProperties(new ImmutableSchemaSql.Builder()
                                                                 .name("id")
                                                                 .sourcePath("parent.href")
                                                                 .type(Type.STRING)
                                                                 .parentPath(["building", "[fk_buildingpart_parent=id]building"])
                                                                 .build())
                                                         .build())
                                                 .build()]

    static List<SchemaSql> SELF_JOINS_FILTER = [new ImmutableSchemaSql.Builder()
                                                        .name("building")
                                                        .type(Type.OBJECT)
                                                        .sourcePath("building")
                                                        .sortKey("id")
                                                        .primaryKey("id")
                                                        .filter(Gt.of("id", ScalarLiteral.of(1)))
                                                        .filterString("id>1")
                                                        .addProperties(new ImmutableSchemaSql.Builder()
                                                                .name("oid")
                                                                .sourcePath("id")
                                                                .type(Type.STRING)
                                                                .role(SchemaBase.Role.ID)
                                                                .parentPath(["building{filter=id>1}"])
                                                                .build())
                                                        .addProperties(new ImmutableSchemaSql.Builder()
                                                                .name("building")
                                                                .type(Type.OBJECT_ARRAY)
                                                                .sourcePath("consistsOfBuildingPart")
                                                                .sortKey("id")
                                                                .primaryKey("id")
                                                                .parentPath(["building{filter=id>1}"])
                                                                .parentSortKeys(["building.id"])
                                                                .filter(Gt.of("consistsOfBuildingPart.href", ScalarLiteral.of(100)))
                                                                .filterString("consistsOfBuildingPart.href>100")
                                                                .addRelation(new ImmutableSqlRelation.Builder()
                                                                        .cardinality(SqlRelation.CARDINALITY.ONE_2_N)
                                                                        .sourceContainer("building")
                                                                        .sourceField("id")
                                                                        .sourceSortKey("id")
                                                                        .sourcePrimaryKey("id")
                                                                        .sourceFilter("id > 1")
                                                                        .targetContainer("building")
                                                                        .targetField("fk_buildingpart_parent")
                                                                        .targetFilter("consistsOfBuildingPart.href > 100")
                                                                        .build())
                                                                .addProperties(new ImmutableSchemaSql.Builder()
                                                                        .name("id")
                                                                        .sourcePath("consistsOfBuildingPart.href")
                                                                        .type(Type.STRING)
                                                                        .parentPath(["building{filter=id>1}", "[id=fk_buildingpart_parent]building{filter=consistsOfBuildingPart.href>100}"])
                                                                        .build())
                                                                .build())
                                                        .addProperties(new ImmutableSchemaSql.Builder()
                                                                .name("building")
                                                                .type(Type.OBJECT)
                                                                .sourcePath("parent")
                                                                .sortKey("id")
                                                                .primaryKey("id")
                                                                .parentPath(["building{filter=id>1}"])
                                                                .parentSortKeys(["building.id"])
                                                                .filter(Gt.of("parent.href", ScalarLiteral.of(1000)))
                                                                .filterString("parent.href>1000")
                                                                .addRelation(new ImmutableSqlRelation.Builder()
                                                                        .cardinality(SqlRelation.CARDINALITY.ONE_2_ONE)
                                                                        .sourceContainer("building")
                                                                        .sourceField("fk_buildingpart_parent")
                                                                        .sourceSortKey("id")
                                                                        .sourcePrimaryKey("id")
                                                                        .sourceFilter("id > 1")
                                                                        .targetContainer("building")
                                                                        .targetField("id")
                                                                        .targetFilter("parent.href > 1000")
                                                                        .build())
                                                                .addProperties(new ImmutableSchemaSql.Builder()
                                                                        .name("id")
                                                                        .sourcePath("parent.href")
                                                                        .type(Type.STRING)
                                                                        .parentPath(["building{filter=id>1}", "[fk_buildingpart_parent=id]building{filter=parent.href>1000}"])
                                                                        .build())
                                                                .build())
                                                        .build()]

    static List<SchemaSql> SELF_JOIN_NESTED_DUPLICATE = [new ImmutableSchemaSql.Builder()
                                                                 .name("building")
                                                                 .type(Type.OBJECT)
                                                                 .sourcePath("building")
                                                                 .sortKey("id")
                                                                 .primaryKey("id")
                                                                 .addProperties(new ImmutableSchemaSql.Builder()
                                                                         .name("id")
                                                                         .sourcePath("id")
                                                                         .type(Type.STRING)
                                                                         .role(SchemaBase.Role.ID)
                                                                         .parentPath(["building"])
                                                                         .build())
                                                                 .addProperties(new ImmutableSchemaSql.Builder()
                                                                         .name("att_string_building")
                                                                         .type(Type.OBJECT_ARRAY)
                                                                         .sourcePath("genericAttributesString")
                                                                         .sortKey("id")
                                                                         .primaryKey("id")
                                                                         .parentPath(["building"])
                                                                         .parentSortKeys(["building.id"])
                                                                         .addRelation(new ImmutableSqlRelation.Builder()
                                                                                 .cardinality(SqlRelation.CARDINALITY.ONE_2_N)
                                                                                 .sourceContainer("building")
                                                                                 .sourceField("id")
                                                                                 .sourceSortKey("id")
                                                                                 .sourcePrimaryKey("id")
                                                                                 .targetContainer("att_string_building")
                                                                                 .targetField("fk_feature")
                                                                                 .build())
                                                                         .addProperties(new ImmutableSchemaSql.Builder()
                                                                                 .name("name")
                                                                                 .sourcePath("genericAttributesString.name")
                                                                                 .type(Type.STRING)
                                                                                 .parentPath(["building", "[id=fk_feature]att_string_building"])
                                                                                 .build())
                                                                         .build())
                                                                 .addProperties(new ImmutableSchemaSql.Builder()
                                                                         .name("building")
                                                                         .type(Type.OBJECT_ARRAY)
                                                                         .sourcePath("consistsOfBuildingPart")
                                                                         .parentPath(["building"])
                                                                         .parentSortKeys(["building.id"])
                                                                         .addRelation(new ImmutableSqlRelation.Builder()
                                                                                 .cardinality(SqlRelation.CARDINALITY.ONE_2_N)
                                                                                 .sourceContainer("building")
                                                                                 .sourceField("id")
                                                                                 .sourceSortKey("id")
                                                                                 .sourcePrimaryKey("id")
                                                                                 .targetContainer("building")
                                                                                 .targetField("fk_buildingpart_parent")
                                                                                 .build())
                                                                         .addProperties(new ImmutableSchemaSql.Builder()
                                                                                 .name("att_string_building")
                                                                                 .type(Type.OBJECT_ARRAY)
                                                                                 .sourcePath("consistsOfBuildingPart.genericAttributesString")
                                                                                 .sortKey("id")
                                                                                 .primaryKey("id")
                                                                                 .parentPath(["building", "[id=fk_buildingpart_parent]building"])
                                                                                 .parentSortKeys(["building.id"])
                                                                                 .addRelation(new ImmutableSqlRelation.Builder()
                                                                                         .cardinality(SqlRelation.CARDINALITY.ONE_2_N)
                                                                                         .sourceContainer("building")
                                                                                         .sourceField("id")
                                                                                         .targetContainer("att_string_building")
                                                                                         .targetField("fk_feature")
                                                                                         .build())
                                                                                 .addProperties(new ImmutableSchemaSql.Builder()
                                                                                         .name("name")
                                                                                         .sourcePath("consistsOfBuildingPart.genericAttributesString.name")
                                                                                         .type(Type.STRING)
                                                                                         .parentPath(["building", "[id=fk_buildingpart_parent]building", "[id=fk_feature]att_string_building"])
                                                                                         .build())
                                                                                 .build())
                                                                         .build())
                                                                 .build()]

    static List<SchemaSql> OBJECT_WITHOUT_SOURCE_PATH = [
            new ImmutableSchemaSql.Builder()
                    .name("explorationsite")
                    .sourcePath("explorationsite")
                    .type(Type.OBJECT)
                    .sortKey("id")
                    .primaryKey("id")
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("id")
                            .type(Type.STRING)
                            .sourcePath("id")
                            .parentPath(["explorationsite"])
                            .role(SchemaBase.Role.ID)
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("legalavailability_fk")
                            .type(Type.STRING)
                            .sourcePath("legalAvailability.title")
                            .parentPath(["explorationsite"])
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("legalavailability_fk")
                            .type(Type.STRING)
                            .sourcePath("legalAvailability.href")
                            .parentPath(["explorationsite"])
                            .build())
                    .build()
    ]

    static List<SchemaSql> OBJECT_WITHOUT_SOURCE_PATH2 = [
            new ImmutableSchemaSql.Builder()
                    .name("o31001")
                    .sourcePath("building")
                    .type(Type.OBJECT)
                    .sortKey("id")
                    .primaryKey("id")
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("id")
                            .type(Type.STRING)
                            .sourcePath("id")
                            .parentPath(["o31001"])
                            .role(SchemaBase.Role.ID)
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("position")
                            .type(Type.STRING)
                            .sourcePath("geometry2D.geometry")
                            .parentPath(["o31001"])
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("bu2d_building__horizontalgeometryreference")
                            .type(Type.OBJECT)
                            .sourcePath("geometry2D.horizontalGeometryReference")
                            .sortKey("id")
                            .primaryKey("id")
                            .parentPath(["o31001"])
                            .parentSortKeys(["o31001.id"])
                            .addRelation(new ImmutableSqlRelation.Builder()
                                    .cardinality(SqlRelation.CARDINALITY.ONE_2_ONE)
                                    .sourceContainer("o31001")
                                    .sourceField("id")
                                    .sourceSortKey("id")
                                    .sourcePrimaryKey("id")
                                    .targetContainer("bu2d_building__horizontalgeometryreference")
                                    .targetField("id")
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("classifier")
                                    .sourcePath("horizontalGeometryReference.href")
                                    .type(Type.STRING)
                                    .parentPath(["o31001", "[id=id]bu2d_building__horizontalgeometryreference"])
                                    .build())
                            .build())
                    .build()
    ]

    static List<SchemaSql> PROPERTY_WITH_MULTIPLE_SOURCE_PATHS = [
            new ImmutableSchemaSql.Builder()
                    .name("o12006")
                    .sourcePath("address")
                    .type(Type.OBJECT)
                    .sortKey("id")
                    .primaryKey("id")
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("objid")
                            .type(Type.STRING)
                            .sourcePath("id")
                            .parentPath(["o12006"])
                            .role(SchemaBase.Role.ID)
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("lan")
                            .type(Type.STRING)
                            .sourcePath("component")
                            .parentPath(["o12006"])
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("rbz")
                            .type(Type.STRING)
                            .sourcePath("component")
                            .parentPath(["o12006"])
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("krs")
                            .type(Type.STRING)
                            .sourcePath("component")
                            .parentPath(["o12006"])
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("gmd")
                            .type(Type.STRING)
                            .sourcePath("component")
                            .parentPath(["o12006"])
                            .build())
                    .build()
    ]

    static List<SchemaSql> CONCAT_VALUES_JOIN = [
            new ImmutableSchemaSql.Builder()
                    .name("o12006")
                    .sourcePath("address")
                    .type(Type.OBJECT)
                    .sortKey("id")
                    .primaryKey("id")
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("objid")
                            .type(Type.STRING)
                            .sourcePath("id")
                            .parentPath(["o12006"])
                            .role(SchemaBase.Role.ID)
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("lan")
                            .type(Type.STRING)
                            .sourcePath("component")
                            .parentPath(["o12006"])
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("rbz")
                            .type(Type.STRING)
                            .sourcePath("component")
                            .parentPath(["o12006"])
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("krs")
                            .type(Type.STRING)
                            .sourcePath("component")
                            .parentPath(["o12006"])
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("gmd")
                            .type(Type.STRING)
                            .sourcePath("component")
                            .parentPath(["o12006"])
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("o12007")
                            .type(Type.OBJECT_ARRAY)
                            .parentPath(["o12006"])
                            .parentSortKeys(["o12006.id"])
                            .sortKey("id")
                            .primaryKey("id")
                            .addRelation(new ImmutableSqlRelation.Builder()
                                    .cardinality(SqlRelation.CARDINALITY.ONE_2_ONE)
                                    .sourceContainer("o12006")
                                    .sourceField("id7")
                                    .sourceSortKey("id")
                                    .sourcePrimaryKey("id")
                                    .targetContainer("o12007")
                                    .targetField("id")
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("nam")
                                    .type(Type.STRING)
                                    .sourcePath("component")
                                    .parentPath(["o12006", "[id7=id]o12007"])
                                    .build())
                            .build())
                    .build()
    ]


    static List<SchemaSql> NESTED_JOINS = [
            new ImmutableSchemaSql.Builder()
                    .name("observationsubject")
                    .sourcePath("observationsubject")
                    .type(Type.OBJECT)
                    .sortKey("id")
                    .primaryKey("id")
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("id")
                            .type(Type.STRING)
                            .sourcePath("id")
                            .parentPath(["observationsubject"])
                            .role(SchemaBase.Role.ID)
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("observationsubject_filtervalues")
                            .sourcePath("filterValues")
                            .type(Type.OBJECT_ARRAY)
                            .parentPath(["observationsubject"])
                            .parentSortKeys(["observationsubject.id"])
                            .sortKey("id")
                            .primaryKey("id")
                            .addRelation(new ImmutableSqlRelation.Builder()
                                    .cardinality(SqlRelation.CARDINALITY.ONE_2_N)
                                    .sourceContainer("observationsubject")
                                    .sourceField("id")
                                    .sourceSortKey("id")
                                    .sourcePrimaryKey("id")
                                    .targetContainer("observationsubject_filtervalues")
                                    .targetField("observationsubjectid")
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("_type")
                                    .type(Type.STRING)
                                    .sourcePath("filterValues.type")
                                    .parentPath(["observationsubject", "[id=observationsubjectid]observationsubject_filtervalues"])
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("observedproperty")
                                    .type(Type.OBJECT)
                                    .sourcePath("filterValues.filterValueProperty")
                                    .parentPath(["observationsubject", "[id=observationsubjectid]observationsubject_filtervalues"])
                                    .parentSortKeys(["observationsubject.id"])
                                    .sortKey("id")
                                    .primaryKey("id")
                                    .addRelation(new ImmutableSqlRelation.Builder()
                                            .cardinality(SqlRelation.CARDINALITY.ONE_2_N)
                                            .sourceContainer("observationsubject_filtervalues")
                                            .sourceField("filtervalueproperty_fk")
                                            .sourceSortKey("id")
                                            .sourcePrimaryKey("id")
                                            .targetContainer("observedproperty")
                                            .targetField("code")
                                            .build())
                                    .addProperties(new ImmutableSchemaSql.Builder()
                                            .name("symbol")
                                            .type(Type.STRING)
                                            .sourcePath("filterValues.filterValueProperty.title")
                                            .parentPath(["observationsubject", "[id=observationsubjectid]observationsubject_filtervalues", "[filtervalueproperty_fk=code]observedproperty"])
                                            .build())
                                    .addProperties(new ImmutableSchemaSql.Builder()
                                            .name("code")
                                            .type(Type.STRING)
                                            .sourcePath("filterValues.filterValueProperty.href")
                                            .parentPath(["observationsubject", "[id=observationsubjectid]observationsubject_filtervalues", "[filtervalueproperty_fk=code]observedproperty"])
                                            .build())
                                    .build())
                            .build())
                    .build()
    ]

    static List<SchemaSql> NESTED_VALUE_ARRAY = [
            new ImmutableSchemaSql.Builder()
                    .name("o42003")
                    .sourcePath("strassenachse")
                    .type(Type.OBJECT)
                    .sortKey("id")
                    .primaryKey("id")
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("id")
                            .type(Type.STRING)
                            .sourcePath("id")
                            .parentPath(["o42003"])
                            .role(SchemaBase.Role.ID)
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("o42002")
                            .sourcePath("strasse")
                            .type(Type.OBJECT)
                            .parentPath(["o42003"])
                            .parentSortKeys(["o42003.id"])
                            .sortKey("id")
                            .primaryKey("id")
                            .addRelation(new ImmutableSqlRelation.Builder()
                                    .cardinality(SqlRelation.CARDINALITY.ONE_2_N)
                                    .sourceContainer("o42003")
                                    .sourceField("id")
                                    .sourceSortKey("id")
                                    .sourcePrimaryKey("id")
                                    .targetContainer("o42003__p0000103000")
                                    .targetField("rid")
                                    .build())
                            .addRelation(new ImmutableSqlRelation.Builder()
                                    .cardinality(SqlRelation.CARDINALITY.ONE_2_N)
                                    .sourceContainer("o42003__p0000103000")
                                    .sourceField("p0000103000")
                                    .targetContainer("o42002")
                                    .targetField("objid")
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("nam")
                                    .type(Type.STRING)
                                    .sourcePath("strasse.name")
                                    .parentPath(["o42003", "[id=rid]o42003__p0000103000", "[p0000103000=objid]o42002"])
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("o42002__bez")
                                    .type(Type.OBJECT_ARRAY)
                                    .sourcePath("strasse")
                                    .parentPath(["o42003", "[id=rid]o42003__p0000103000", "[p0000103000=objid]o42002"])
                                    .parentSortKeys(["o42003.id"])
                                    .sortKey("id")
                                    .primaryKey("id")
                                    .addRelation(new ImmutableSqlRelation.Builder()
                                            .cardinality(SqlRelation.CARDINALITY.ONE_2_N)
                                            .sourceContainer("o42002")
                                            .sourceField("id")
                                            .sourceSortKey("id")
                                            .sourcePrimaryKey("id")
                                            .targetContainer("o42002__bez")
                                            .targetField("rid")
                                            .build())
                                    .addProperties(new ImmutableSchemaSql.Builder()
                                            .name("bez")
                                            .type(Type.STRING)
                                            .sourcePath("strasse.bezeichnung")
                                            .parentPath(["o42003", "[id=rid]o42003__p0000103000", "[p0000103000=objid]o42002", "[id=rid]o42002__bez"])
                                            .sortKey("id")
                                            .build())
                                    .build())
                            .build())
                    .build()
    ]

    static List<SchemaSql> CONNECTOR = [
            new ImmutableSchemaSql.Builder()
                    .name("eignungsflaeche")
                    .sourcePath("eignungsflaeche")
                    .type(Type.OBJECT)
                    .sortKey("id")
                    .primaryKey("id")
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("id")
                            .type(Type.STRING)
                            .sourcePath("id")
                            .parentPath(["eignungsflaeche"])
                            .role(SchemaBase.Role.ID)
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("osirisobjekt")
                            .type(Type.STRING)
                            .sourcePath("osirisobjekt")
                            .parentPath(["eignungsflaeche"])
                            .subDecoder("JSON")
                            .subDecoderPaths(ImmutableMap.of("kennung", "kennung"))
                            .subDecoderTypes(ImmutableMap.of("kennung", SchemaSql.PropertyTypeInfo.of(Type.STRING, Optional.empty(), false)))
                            .build())
                    .build()
    ]

    static List<SchemaSql> CONNECTOR_MERGE = [
            new ImmutableSchemaSql.Builder()
                    .name("eignungsflaeche")
                    .sourcePath("eignungsflaeche")
                    .type(Type.OBJECT)
                    .sortKey("id")
                    .primaryKey("id")
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("id")
                            .type(Type.STRING)
                            .sourcePath("id")
                            .parentPath(["eignungsflaeche"])
                            .role(SchemaBase.Role.ID)
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("osirisobjekt")
                            .type(Type.STRING)
                            .sourcePath("osirisobjekt")
                            .parentPath(["eignungsflaeche"])
                            .subDecoder("JSON")
                            .subDecoderPaths(ImmutableMap.of("kennung", "kennung", "programm", "programm"))
                            .subDecoderTypes(ImmutableMap.of("kennung", SchemaSql.PropertyTypeInfo.of(Type.STRING, Optional.empty(), false), "programm", SchemaSql.PropertyTypeInfo.of(Type.STRING, Optional.empty(), false)))
                            .build())
                    .build()
    ]

    static List<SchemaSql> CONNECTOR_OBJECT = [
            new ImmutableSchemaSql.Builder()
                    .name("eignungsflaeche")
                    .sourcePath("eignungsflaeche")
                    .type(Type.OBJECT)
                    .sortKey("id")
                    .primaryKey("id")
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("id")
                            .type(Type.STRING)
                            .sourcePath("id")
                            .parentPath(["eignungsflaeche"])
                            .role(SchemaBase.Role.ID)
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("osirisobjekt")
                            .type(Type.STRING)
                            .sourcePath("osirisobjekt")
                            .parentPath(["eignungsflaeche"])
                            .subDecoder("JSON")
                            .subDecoderPaths(ImmutableMap.of("osirisobjekt.kennung", "kennung"))
                            .subDecoderTypes(ImmutableMap.of("osirisobjekt.kennung", SchemaSql.PropertyTypeInfo.of(Type.STRING, Optional.empty(), false)))
                            .build())
                    .build()
    ]

    static List<SchemaSql> CONNECTOR_MERGE_OBJECT = [
            new ImmutableSchemaSql.Builder()
                    .name("eignungsflaeche")
                    .sourcePath("eignungsflaeche")
                    .type(Type.OBJECT)
                    .sortKey("id")
                    .primaryKey("id")
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("id")
                            .type(Type.STRING)
                            .sourcePath("id")
                            .parentPath(["eignungsflaeche"])
                            .role(SchemaBase.Role.ID)
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("osirisobjekt")
                            .type(Type.STRING)
                            .sourcePath("osirisobjekt")
                            .parentPath(["eignungsflaeche"])
                            .subDecoder("JSON")
                            .subDecoderPaths(ImmutableMap.of("osirisobjekt.kennung", "kennung", "programm", "programm"))
                            .subDecoderTypes(ImmutableMap.of("osirisobjekt.kennung", SchemaSql.PropertyTypeInfo.of(Type.STRING, Optional.empty(), false), "programm", SchemaSql.PropertyTypeInfo.of(Type.STRING, Optional.empty(), false)))
                            .build())
                    .build()
    ]

    static List<SchemaSql> CONCAT_OBJECT_ARRAYS = [
            new ImmutableSchemaSql.Builder()
                    .name("pfs_plan")
                    .sourcePath("pfs_plan")
                    .type(Type.OBJECT)
                    .sortKey("id")
                    .primaryKey("id")
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("objid")
                            .type(Type.STRING)
                            .sourcePath("id")
                            .parentPath(["pfs_plan"])
                            .role(SchemaBase.Role.ID)
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("bst_abwasserleitung")
                            .sourcePath("hatObjekt")
                            .type(Type.OBJECT_ARRAY)
                            .parentPath(["pfs_plan"])
                            .parentSortKeys(["pfs_plan.id"])
                            .sortKey("id")
                            .primaryKey("id")
                            .addRelation(new ImmutableSqlRelation.Builder()
                                    .cardinality(SqlRelation.CARDINALITY.ONE_2_N)
                                    .sourceContainer("pfs_plan")
                                    .sourceField("_id")
                                    .sourceSortKey("id")
                                    .sourcePrimaryKey("id")
                                    .targetContainer("bst_abwasserleitung")
                                    .targetField("gehoertzuplan_pfs_plan_fk")
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("_id")
                                    .type(Type.INTEGER)
                                    .sourcePath("hatObjekt.id")
                                    .parentPath(["pfs_plan", "[_id=gehoertzuplan_pfs_plan_fk]bst_abwasserleitung"])
                                    .sortKey("id")
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("name")
                                    .type(Type.STRING)
                                    .sourcePath("hatObjekt.title")
                                    .parentPath(["pfs_plan", "[_id=gehoertzuplan_pfs_plan_fk]bst_abwasserleitung"])
                                    .sortKey("id")
                                    .build())
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("bst_erdgasleitung")
                            .sourcePath("hatObjekt")
                            .type(Type.OBJECT_ARRAY)
                            .parentPath(["pfs_plan"])
                            .parentSortKeys(["pfs_plan.id"])
                            .sortKey("id")
                            .primaryKey("id")
                            .addRelation(new ImmutableSqlRelation.Builder()
                                    .cardinality(SqlRelation.CARDINALITY.ONE_2_N)
                                    .sourceContainer("pfs_plan")
                                    .sourceField("_id")
                                    .sourceSortKey("id")
                                    .sourcePrimaryKey("id")
                                    .targetContainer("bst_erdgasleitung")
                                    .targetField("gehoertzuplan_pfs_plan_fk")
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("_id")
                                    .type(Type.INTEGER)
                                    .sourcePath("hatObjekt.id")
                                    .parentPath(["pfs_plan", "[_id=gehoertzuplan_pfs_plan_fk]bst_erdgasleitung"])
                                    .sortKey("id")
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("name")
                                    .type(Type.STRING)
                                    .sourcePath("hatObjekt.title")
                                    .parentPath(["pfs_plan", "[_id=gehoertzuplan_pfs_plan_fk]bst_erdgasleitung"])
                                    .sortKey("id")
                                    .build())
                            .build())
                    .build()
    ]

    static List<SchemaSql> CONCAT_ROOT = [
            new ImmutableSchemaSql.Builder()
                    .name("o73005")
                    .sourcePath("administrativeunit")
                    .type(Type.OBJECT)
                    .sortKey("sch")
                    .primaryKey("id")
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("_id")
                            .type(Type.INTEGER)
                            .sourcePath("id")
                            .parentPath(["o73005"])
                            .role(SchemaBase.Role.ID)
                            .sortKey("sch")
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("verwaltungseinheit")
                            .type(Type.OBJECT)
                            .parentPath(["o73005"])
                            .parentSortKeys(["o73005.sch"])
                            .sortKey("id")
                            .primaryKey("id")
                            .addRelation(new ImmutableSqlRelation.Builder()
                                    .cardinality(SqlRelation.CARDINALITY.ONE_2_N)
                                    .sourceContainer("o73005")
                                    .sourceField("sch")
                                    .sourceSortKey("sch")
                                    .sourcePrimaryKey("id")
                                    .targetContainer("verwaltungseinheit")
                                    .targetField("ags")
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("geometrie")
                                    .type(Type.GEOMETRY)
                                    .role(SchemaBase.Role.PRIMARY_GEOMETRY)
                                    .sourcePath("geometry")
                                    .parentPath(["o73005", "[sch=ags]verwaltungseinheit"])
                                    .sortKey("id")
                                    .build())
                            .build())
                    .build(),
            new ImmutableSchemaSql.Builder()
                    .name("o73004")
                    .sourcePath("administrativeunit")
                    .type(Type.OBJECT)
                    .sortKey("sch")
                    .primaryKey("id")
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("_id")
                            .type(Type.INTEGER)
                            .sourcePath("id")
                            .parentPath(["o73004"])
                            .role(SchemaBase.Role.ID)
                            .sortKey("sch")
                            .build())
                    .addProperties(new ImmutableSchemaSql.Builder()
                            .name("verwaltungseinheit")
                            .sourcePath("upperLevelUnit")
                            .type(Type.OBJECT)
                            .parentPath(["o73004"])
                            .parentSortKeys(["o73004.sch"])
                            .sortKey("id")
                            .primaryKey("id")
                            .addRelation(new ImmutableSqlRelation.Builder()
                                    .cardinality(SqlRelation.CARDINALITY.ONE_2_N)
                                    .sourceContainer("o73004")
                                    .sourceField("sch")
                                    .sourceSortKey("sch")
                                    .sourcePrimaryKey("id")
                                    .targetContainer("verwaltungseinheit")
                                    .targetField("ags")
                                    .build())
                            .addProperties(new ImmutableSchemaSql.Builder()
                                    .name("uebergobjekt")
                                    .type(Type.STRING)
                                    .sourcePath("upperLevelUnit.href")
                                    .parentPath(["o73004", "[sch=ags]verwaltungseinheit"])
                                    .build())
                            .build())
                    .build()
    ]
}
