
maturity = 'MATURE'
maintenance = 'FULL'
description = 'SQL feature provider, PostgreSQL and GeoPackage.'
descriptionDe = 'SQL-Feature-Provider, PostgreSQL und GeoPackage.'


dependencies {
    provided 'de.interactive_instruments:xtraplatform-blobs'
    provided 'de.interactive_instruments:xtraplatform-entities'
    provided 'de.interactive_instruments:xtraplatform-streams'
    provided 'de.interactive_instruments:xtraplatform-values'
    provided 'de.interactive_instruments:xtraplatform-nativ-loader'
    provided 'de.interactive_instruments:xtraplatform-spatialite'
    provided 'de.interactive_instruments:xtraplatform-web'
    provided project(':xtraplatform-geometries')
    provided project(':xtraplatform-codelists')
    provided project(':xtraplatform-cql')
    provided project(':xtraplatform-crs')
    provided project(':xtraplatform-features')
    provided project(':xtraplatform-strings')

    embedded (libs.rxjava.jdbc) {
        exclude module: 'rxjava'
        exclude module: 'reactive-streams'
        exclude module: 'commons-io'
        exclude module: 'slf4j-api'
        exclude group: 'com.google.code.findbugs'
    }
    //use reactive-streams + rxjava exported from this
    embeddedImport 'de.interactive_instruments:xtraplatform-streams'

    embeddedFlat libs.bundles.sql
    embeddedFlatExport libs.sqlite

    testImplementation 'de.interactive_instruments:xtraplatform-proj'
    testImplementation(testFixtures(project(":xtraplatform-cql")))
    testImplementation(testFixtures(project(":xtraplatform-features")))
}

moduleInfo {
    requires = [
            'java.management',
            'java.naming',
            'java.sql',
            'java.security.sasl', //TODO: who needs this? removing it breaks the build
    ]
    uses = [
            'schemacrawler.tools.databaseconnector.DatabaseConnector'
    ]
}
