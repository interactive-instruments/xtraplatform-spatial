/*
 * Copyright 2022 interactive instruments GmbH
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package de.ii.xtraplatform.features.gml.domain;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import de.ii.xtraplatform.docs.DocFile;
import de.ii.xtraplatform.docs.DocIgnore;
import de.ii.xtraplatform.docs.DocStep;
import de.ii.xtraplatform.docs.DocStep.Step;
import de.ii.xtraplatform.docs.DocTable;
import de.ii.xtraplatform.docs.DocTable.ColumnSet;
import de.ii.xtraplatform.docs.DocVar;
import de.ii.xtraplatform.features.domain.ExtensionConfiguration;
import de.ii.xtraplatform.features.domain.FeatureProviderDataV2;
import de.ii.xtraplatform.features.domain.FeatureSchema;
import de.ii.xtraplatform.features.domain.ImmutableFeatureSchema;
import de.ii.xtraplatform.features.domain.WithConnectionInfo;
import de.ii.xtraplatform.store.domain.entities.EntityDataBuilder;
import de.ii.xtraplatform.store.domain.entities.EntityDataDefaults;
import de.ii.xtraplatform.store.domain.entities.maptobuilder.BuildableMap;
import de.ii.xtraplatform.store.domain.entities.maptobuilder.encoding.BuildableMapEncodingEnabled;
import java.net.URI;
import java.util.List;
import java.util.Objects;
import javax.annotation.Nullable;
import org.immutables.value.Value;

/**
 * # WFS Features
 *
 * @langEn The specifics of the WFS feature provider.
 * @langDe Hier werden die Besonderheiten des WFS-Feature-Providers beschrieben.
 * @langAll ## Connection Info
 * @langEn The connection info object for OGC Web Feature Services has the following properties:
 * @langDe Das Connection-Info-Objekt für OGC Web Feature Services wird wie folgt beschrieben:
 * @langAll {@docTable:connectionInfo}
 * @langEn ### Example
 * @langDe ### Beispiel
 * @langAll {@docVar:example}
 * @langEn ## Path Syntax
 *     <p>The paths for WFS feature providers are generated by ldproxy when analyzing the WFS und
 *     should not be changed.
 * @langDe ## Pfad-Syntax
 *     <p>Die Pfade in den WFS-Feature-Providern werden von ldproxy bei der Analyse des WFS gebildet
 *     und sollten nicht verändert werden.
 * @ref:connectionInfo {@link de.ii.xtraplatform.features.gml.domain.ImmutableConnectionInfoWfsHttp}
 * @ref:example {@link de.ii.xtraplatform.features.gml.domain.ConnectionInfoWfsHttp}
 */
@DocFile(
    path = "providers",
    name = "wfs.md",
    tables = {
      @DocTable(
          name = "connectionInfo",
          rows = {
            @DocStep(type = Step.TAG_REFS, params = "{@ref:connectionInfo}"),
            @DocStep(type = Step.JSON_PROPERTIES)
          },
          columnSet = ColumnSet.JSON_PROPERTIES),
    },
    vars = {
      @DocVar(
          name = "example",
          value = {
            @DocStep(type = Step.TAG_REFS, params = "{@ref:example}"),
            @DocStep(type = Step.TAG, params = "{@example}")
          })
    })
@Value.Immutable
@Value.Style(
    builder = "new",
    deepImmutablesDetection = true,
    attributeBuilderDetection = true,
    passAnnotations = DocIgnore.class)
@BuildableMapEncodingEnabled
@JsonDeserialize(builder = ImmutableFeatureProviderWfsData.Builder.class)
public interface FeatureProviderWfsData
    extends FeatureProviderDataV2, WithConnectionInfo<ConnectionInfoWfsHttp> {

  String PLACEHOLDER_URI = "https://place.holder";

  @Nullable
  @Override
  ConnectionInfoWfsHttp getConnectionInfo();

  // for json ordering
  @Override
  BuildableMap<FeatureSchema, ImmutableFeatureSchema.Builder> getTypes();

  @Value.Check
  default FeatureProviderWfsData initNestedDefault() {
    /*
     workaround for https://github.com/interactive-instruments/ldproxy/issues/225
     TODO: remove when fixed
    */
    if (Objects.isNull(getConnectionInfo()) || Objects.isNull(getConnectionInfo().getUri())) {
      ImmutableFeatureProviderWfsData.Builder builder =
          new ImmutableFeatureProviderWfsData.Builder().from(this);
      builder.connectionInfoBuilder().uri(URI.create(PLACEHOLDER_URI));

      return builder.build();
    }

    return this;
  }

  @Value.Check
  default FeatureProviderWfsData mergeExtensions() {
    List<ExtensionConfiguration> distinctExtensions = getMergedExtensions();

    // remove duplicates
    if (getExtensions().size() > distinctExtensions.size()) {
      return new ImmutableFeatureProviderWfsData.Builder()
          .from(this)
          .extensions(distinctExtensions)
          .build();
    }

    return this;
  }

  abstract class Builder
      extends FeatureProviderDataV2.Builder<ImmutableFeatureProviderWfsData.Builder>
      implements EntityDataBuilder<FeatureProviderDataV2> {

    public abstract ImmutableFeatureProviderWfsData.Builder connectionInfo(
        ConnectionInfoWfsHttp connectionInfo);

    @Override
    public ImmutableFeatureProviderWfsData.Builder fillRequiredFieldsWithPlaceholders() {
      return this.id(EntityDataDefaults.PLACEHOLDER)
          .providerType(EntityDataDefaults.PLACEHOLDER)
          .featureProviderType(EntityDataDefaults.PLACEHOLDER)
          .connectionInfo(
              new ImmutableConnectionInfoWfsHttp.Builder()
                  .uri(URI.create("http://www.example.com"))
                  .build());
    }
  }
}
