subprojects {
    apply plugin: 'license'

    license {
        header rootProject.file('gradle/license-header')
        strictCheck true
        skipExistingHeaders false
        excludes([
                "**/CqlParser.java",
                "**/CqlLexer.java",
                "**/CqlParserBaseVisitor.java",
                "**/CqlParserVisitor.java",
                "**/Modifiable*.java",
                "**/Immutable*.java",
                "**/*.bnf",
                "**/*.g4",
                "**/*.tokens",
                "**/*.interp",
                "**/*.mustache",
                "**/*.png",
                "**/*.ico",
                "**/*.xcf",
                "**/*.txt",
                "**/*.yml",
                "**/*.json"])
        ext.year = Calendar.getInstance().get(Calendar.YEAR)
        ext.name = "interactive instruments GmbH"

        //ext.name = "European Union, interactive instruments GmbH"
        //includes([
        excludes([
            "**/FrameworkMessages.java",
            "**/CSWAdapter.java",
            "**/CSWOperation.java",
            "**/CSWOperationGetCapabilities.java",
            "**/CSWOperationGetRecords.java",
            "**/CSWOperationQuery.java",
            "**/CSWQuery.java",
            "**/CSWRequest.java",
            "**/AbstractCSWRecordsAnalyzer.java",
            "**/CSWCapabilitiesAnalyzer.java",
            "**/CSWCapabilitiesParser.java",
            "**/CSWRecordsAnalyzer.java",
            "**/CSWRecordsParser.java",
            "**/ExtractWFSUrlsFromCSW.java",
            "**/ExtractWfsUrlsCSWRecordsAnalyzer.java",
            "**/LoggingCSWRecordsAnalyzer.java",
            "**/MultiCSWRecordsAnalyzer.java",
            "**/CSWAdapterTest.java",
            "**/CSW.java",
            "**/OWS.java",
            "**/VersionedVocabulary.java",
            "**/WFS.java",
            "**/GMLAnalyzer.java",
            "**/GMLParser.java",
            "**/GMLSchemaAnalyzer.java",
            "**/GMLSchemaParser.java",
            "**/WFSAdapter.java",
            "**/AbstractWfsCapabilitiesAnalyzer.java",
            "**/LoggingWfsCapabilitiesAnalyzer.java",
            "**/MultiWfsCapabilitiesAnalyzer.java",
            "**/WFSCapabilitiesAnalyzer.java",
            "**/WFSCapabilitiesParser.java",
            "**/DescribeFeatureType.java",
            "**/GetCapabilities.java",
            "**/WFSAdapter.java",
            "**/WFSOperation.java",
            "**/WFSOperationDescribeFeatureType.java",
            "**/WFSOperationGetCapabilities.java",
            "**/WFSOperationGetFeature.java",
            "**/WFSOperationGetPropertyValue.java",
            "**/WFSQuery.java",
            "**/WFSRequest.java",
            "**/AbstractWfsCapabilitiesAnalyzer.java",
            "**/LoggingWfsCapabilitiesAnalyzer.java",
            "**/MultiWfsCapabilitiesAnalyzer.java",
            "**/WFSCapabilitiesAnalyzer.java",
            "**/WFSCapabilitiesParser.java",
            "**/XMLNamespaceNormalizer.java",
            "**/XMLPathTracker.java",
            "**/AbstractWfsProxyFeatureTypeAnalyzer.java",
            "**/AbstractWfsProxyService.java",
            "**/WFSProxyServiceProperties.java",
            "**/WfsProxyCapabilities.java",
            "**/WfsProxyCapabilitiesAnalyzer.java",
            "**/WfsProxyMappingStatus.java",
            "**/WfsProxyOnTheFlyMapping.java"
        ])
    }
}
